use anchor_spl::token::spl_token;
use itertools::Itertools;
use log::{error, info};
use serde::{Deserialize, Serialize};
use solana_client::{
    connection_cache::ConnectionCache,
    rpc_client::RpcClient,
    rpc_config::{RpcSendTransactionConfig, RpcSimulateTransactionConfig},
    send_and_confirm_transactions_in_parallel::{send_and_confirm_transactions_in_parallel, SendAndConfirmConfig},
    tpu_client::{TpuClient, TpuClientConfig},
};
use solana_sdk::{
    address_lookup_table::{
        instruction::{create_lookup_table, extend_lookup_table},
        state::AddressLookupTable,
        AddressLookupTableAccount,
    },
    commitment_config::{CommitmentConfig, CommitmentLevel},
    compute_budget::ComputeBudgetInstruction,
    instruction::Instruction,
    message::{v0, VersionedMessage},
    pubkey::Pubkey,
    signature::{read_keypair_file, Keypair, Signer},
    transaction::VersionedTransaction,
};
use solana_transaction_status::UiTransactionEncoding;
use anyhow::Result;
use spl_associated_token_account::{get_associated_token_address, instruction::create_associated_token_account};
use std::{fs::File, io::BufReader, path::Path, sync::Arc};

use crate::common::config::Config;
use crate::common::utils::from_str;
use crate::transactions::{
    meteoradlmm_swap::{construct_meteora_instructions, SwapParametersMeteora},
    orca_whirlpool_swap::{construct_orca_whirlpool_instructions, SwapParametersOrcaWhirlpool},
};

pub async fn create_and_send_swap_transaction(simulate_or_send: SendOrSimulate, chain: ChainType, transaction_infos: SwapPathResult) -> Result<()> {
    info!("üîÑ Create swap transaction.... ");
    
    let config = Config::load();
    let rpc_url = match chain {
        ChainType::Mainnet => config.rpc_url.clone(),
        ChainType::Devnet => "https://api.devnet.solana.com".to_string(), // Hardcoded for Devnet
    };
    let rpc_client = RpcClient::new(rpc_url);

    let payer = read_keypair_file("~/.config/solana/id.json").expect("Wallet keypair file not found");
    info!("üí≥ Wallet {:?}", payer.pubkey());

    info!("üÜî Create/Send Swap instruction....");
    let compute_budget_ix = ComputeBudgetInstruction::set_compute_unit_limit(1_400_000);
    let compute_budget_instruction = vec![InstructionDetails {
        instruction: compute_budget_ix,
        details: "Compute Budget Instruction".to_string(),
        market: None,
    }];
    let priority_fees_ix = ComputeBudgetInstruction::set_compute_unit_price(0);
    let priority_fees_instruction = vec![InstructionDetails {
        instruction: priority_fees_ix,
        details: "Set priority fees".to_string(),
        market: None,
    }];

    let swaps_construct_instructions: Vec<InstructionDetails> = construct_transaction(transaction_infos).await;
    let mut swap_instructions: Vec<InstructionDetails> = vec![compute_budget_instruction, priority_fees_instruction, swaps_construct_instructions].concat();

    if swap_instructions.is_empty() {
        error!("Error in create_transaction(), zero instructions");
        return Ok(());
    }
    
    let mut lut_addresses: Vec<Pubkey> = Vec::new();
    for si in swap_instructions.clone() {
        if let Some(market_addr) = si.market.as_ref().map(|m| m.address) {
            let (have_lut_address, lut_address) = get_lut_address_for_market(market_addr, false)?;
            if have_lut_address {
                if let Some(lut_addr) = lut_address {
                    if !lut_addresses.contains(&lut_addr) {
                        info!("LUT address {} pushed!", lut_addr);
                        lut_addresses.push(lut_addr);
                    }
                }
            } else {
                error!("‚ùå No LUT address already crafted for the market {:?}", market_addr);
            }
        } else {
            info!("Skip get LUT table for non swap instruction: {:?}", si.details);
        }
    }
    
    let si_details: Vec<String> = swap_instructions.clone().into_iter().map(|instruc_details| instruc_details.details).collect();
    info!("üìã Swap instructions Details: {:?}", si_details);
    info!("Swap instructions: {:?}", swap_instructions);

    let mut vec_address_lut: Vec<AddressLookupTableAccount> = Vec::new();
    for lut_address in lut_addresses {
        let raw_lut_account = rpc_client.get_account(&lut_address)?;
        let address_lookup_table = AddressLookupTable::deserialize(&raw_lut_account.data)?;
        let address_lookup_table_account = AddressLookupTableAccount {
            key: lut_address,
            addresses: address_lookup_table.addresses.to_vec(),
        };
        println!("Address in lookup_table: {}", address_lookup_table_account.addresses.len());
        vec_address_lut.push(address_lookup_table_account);
    }

    let mut instructions: Vec<Instruction> = swap_instructions.into_iter().map(|instruc_details| instruc_details.instruction).collect();
    let commitment_config = CommitmentConfig::confirmed();
    let tx = VersionedTransaction::try_new(
        VersionedMessage::V0(v0::Message::try_compile(
            &payer.pubkey(),
            &instructions,
            &vec_address_lut,
            rpc_client.get_latest_blockhash_with_commitment(commitment_config)?.0,
        )?),
        &[&payer],
    )?;

    let config = RpcSimulateTransactionConfig {
        sig_verify: true,
        commitment: Some(commitment_config),
        ..RpcSimulateTransactionConfig::default()
    };
    
    let result = rpc_client.simulate_transaction_with_config(&tx, config)?.value;
    let logs_simulation = result.logs.unwrap_or_default();
    if logs_simulation.is_empty() {
        error!("‚ùå Get out! Simulate Error: {:?}", result.err);
        return Ok(());
    } else {
        info!("üßæ Simulate Tx Ata/Extend Logs: {:?}", result.logs);
    }

    let result_cu: u64 = result.units_consumed.unwrap_or(150_000);
    info!("üî¢ Computed Units: {}", result_cu);

    let fees = rpc_client.get_recent_prioritization_fees(&[])?;
    let average_fees = average(fees.iter().map(|iter| iter.prioritization_fee).collect());
    info!("üî¢ Average Prioritization fees price: {}", average_fees);

    let compute_budget_ix = ComputeBudgetInstruction::set_compute_unit_limit(result_cu as u32);
    let priority_fees_ix = ComputeBudgetInstruction::set_compute_unit_price(100);
    instructions[0] = priority_fees_ix;
    instructions[1] = compute_budget_ix;

    if simulate_or_send == SendOrSimulate::Send {
        let transaction_config: RpcSendTransactionConfig = RpcSendTransactionConfig {
            skip_preflight: true,
            preflight_commitment: Some(CommitmentLevel::Confirmed),
            encoding: Some(UiTransactionEncoding::Base58),
            max_retries: Some(0),
            min_context_slot: None,
        };
 
        let new_payer: Keypair = read_keypair_file("~/.config/solana/id.json").expect("Wallet keypair not found");
        let txn = VersionedTransaction::try_new(
            VersionedMessage::V0(v0::Message::try_compile(
                &new_payer.pubkey(),
                &instructions,
                &vec_address_lut,
                rpc_client.get_latest_blockhash_with_commitment(commitment_config)?.0,
            )?),
            &[&new_payer],
        )?;
        
        let non_blocking_rpc_client = solana_client::nonblocking::rpc_client::RpcClient::new(config.rpc_url.clone());
        let arc_rpc_client = Arc::new(non_blocking_rpc_client);
        let connection_cache = ConnectionCache::new_quic("connection_cache_cli_program_quic", 1);
        let signer: [Arc<dyn Signer>; 1] = [Arc::new(new_payer)];

        let iteration_number = 2;
        let transaction_errors = if let ConnectionCache::Quic(cache) = connection_cache {
            let tpu_client = TpuClient::new_with_connection_cache(
                arc_rpc_client.clone(),
                &"wss://api.devnet.solana.com", // Hardcoded for Devnet
                TpuClientConfig::default(),
                cache,
            )
            .await?;
            send_and_confirm_transactions_in_parallel(
                arc_rpc_client,
                Some(tpu_client),
                &[txn],
                &signer,
                SendAndConfirmConfig {
                    resign_txs_count: Some(iteration_number),
                    with_spinner: true,
                },
            )
            .await
            .map_err(|err| {
                error!("Transaction send failed: {}", err);
                format!("Data writes to account failed: {}", err)
            })?
            .into_iter()
            .map(|err| format!("Data writes to account failed: {:?}", err))
            .collect::<String>()
        } else {
            String::new()
        };
        if !transaction_errors.is_empty() {
            error!("‚ùå Swap transaction is not executed: {:?}", transaction_errors);
        }
    }
    Ok(())
}

pub async fn create_ata_extendlut_transaction(chain: ChainType, simulate_or_send: SendOrSimulate, transaction_infos: SwapPathResult, lut_address: Pubkey, tokens: Vec<Pubkey>) -> Result<()> {
    info!("üîÑ Create ATA/Extend LUT transaction.... ");
    
    let config = Config::load();
    let rpc_url = match chain {
        ChainType::Mainnet => &config.rpc_url,
        ChainType::Devnet => "https://api.devnet.solana.com",
    };
    let rpc_client = RpcClient::new(rpc_url);

    let payer: Keypair = read_keypair_file("~/.config/solana/id.json").expect("Wallet keypair not found");
    info!("üí≥ Wallet {:?}", payer.pubkey());

    let mut vec_pda_instructions: Vec<Instruction> = Vec::new();
    for token in tokens {
        let pda_user_token = get_associated_token_address(&payer.pubkey(), &token);
        match rpc_client.get_account(&pda_user_token) {
            Ok(_) => info!("üü¢ PDA for {} already exist!", token),
            Err(_) => {
                info!("üë∑‚Äç‚ôÇÔ∏è PDA creation...");
                let create_pda_instruction = create_associated_token_account(
                    &payer.pubkey(),
                    &payer.pubkey(),
                    &token,
                    &spl_token::id(),
                );
                vec_pda_instructions.push(create_pda_instruction);
            }
        }
    }

    let mut swap_instructions: Vec<InstructionDetails> = construct_transaction(transaction_infos).await;
    for i in (0..swap_instructions.len()).rev() {
        if let Some(market_addr) = swap_instructions[i].market.as_ref().map(|m| m.address) {
            let (lut_exist, _) = get_lut_address_for_market(market_addr, false)?;
            if lut_exist {
                info!("üü¢ Lookup already exist for {}!", market_addr);
                swap_instructions.remove(i);
                continue;
            }
            info!("üë∑‚Äç‚ôÇÔ∏è Extend lookup added for: {}", market_addr);
        }
    }
    if swap_instructions.is_empty() && vec_pda_instructions.is_empty() {
        info!("‚û°Ô∏è No ATA/Extend lookup transaction needed");
        return Ok(());
    }
    
    let mut vec_details_extend_instructions: Vec<InstructionDetails> = Vec::new();
    for instr in swap_instructions {
        if instr.instruction.accounts.is_empty() {
            continue;
        }
        let market = match instr.market {
            Some(m) => m,
            None => {
                error!("‚ùå Instruction market is None");
                return Ok(());
            }
        };
        let accounts: Vec<Pubkey> = instr.instruction.accounts.iter().map(|account| account.pubkey).collect();
        let extend_instruction = extend_lookup_table(
            lut_address,
            payer.pubkey(),
            Some(payer.pubkey()),
            accounts,
        );
        vec_details_extend_instructions.push(InstructionDetails {
            instruction: extend_instruction,
            details: "Extend Instruction".to_string(),
            market: Some(market.clone()),
        });
        println!("Extend LUT instruction for market: {:?}", market);
        break;
    }

    let compute_budget_ix = ComputeBudgetInstruction::set_compute_unit_limit(1_400_000);
    let priority_fees_ix = ComputeBudgetInstruction::set_compute_unit_price(0);
    let compute_budget_instruction = vec![priority_fees_ix, compute_budget_ix];
    let vec_extend_instructions: Vec<Instruction> = vec_details_extend_instructions
        .into_iter()
        .map(|instruc_details| instruc_details.instruction)
        .collect();

    let mut vec_all_instructions: Vec<Instruction> = vec![compute_budget_instruction, vec_pda_instructions, vec_extend_instructions].concat();

    let commitment_config = CommitmentConfig::confirmed();
    let tx = VersionedTransaction::try_new(
        VersionedMessage::V0(v0::Message::try_compile(
            &payer.pubkey(),
            &vec_all_instructions,
            &[],
            rpc_client.get_latest_blockhash_with_commitment(commitment_config)?.0,
        )?),
        &[&payer],
    )?;

    let config = RpcSimulateTransactionConfig {
        sig_verify: true,
        commitment: Some(commitment_config),
        ..RpcSimulateTransactionConfig::default()
    };
    
    let result = rpc_client.simulate_transaction_with_config(&tx, config)?.value;
    if result.logs.unwrap_or_default().is_empty() {
        error!("‚ùå Get out! Simulate Error: {:?}", result.err);
        return Ok(());
    } else {
        info!("üßæ Simulate Tx Ata/Extend Logs: {:?}", result.logs);
    }

    let result_cu: u64 = result.units_consumed.unwrap_or(150_000);
    info!("üî¢ Computed Units: {}", result_cu);

    let fees = rpc_client.get_recent_prioritization_fees(&[])?;
    let average_fees = average(fees.iter().map(|iter| iter.prioritization_fee).collect());
    info!("üî¢ Average Prioritization fees price: {}", average_fees);

    let compute_budget_ix = ComputeBudgetInstruction::set_compute_unit_limit(result_cu as u32);
    let priority_fees_ix = ComputeBudgetInstruction::set_compute_unit_price(10);
    vec_all_instructions[0] = priority_fees_ix;
    vec_all_instructions[1] = compute_budget_ix;

    if simulate_or_send == SendOrSimulate::Send {
        let transaction_config: RpcSendTransactionConfig = RpcSendTransactionConfig {
            skip_preflight: false,
            preflight_commitment: Some(CommitmentLevel::Confirmed),
            encoding: Some(UiTransactionEncoding::Base58),
            max_retries: Some(0),
            min_context_slot: None,
        };
 
        let new_payer: Keypair = read_keypair_file("~/.config/solana/id.json").expect("Wallet keypair not found");
        let txn = VersionedTransaction::try_new(
            VersionedMessage::V0(v0::Message::try_compile(
                &new_payer.pubkey(),
                &vec_all_instructions,
                &[],
                rpc_client.get_latest_blockhash_with_commitment(commitment_config)?.0,
            )?),
            &[&new_payer],
        )?;
        
        let non_blocking_rpc_client = solana_client::nonblocking::rpc_client::RpcClient::new(rpc_url.to_string());
        let arc_rpc_client = Arc::new(non_blocking_rpc_client);
        let connection_cache = ConnectionCache::new_quic("connection_cache_cli_program_quic", 1);
        let signer: [Arc<dyn Signer>; 1] = [Arc::new(new_payer)];

        let iteration_number = 5;
        let transaction_errors = if let ConnectionCache::Quic(cache) = connection_cache {
            let tpu_client = TpuClient::new_with_connection_cache(
                arc_rpc_client.clone(),
                "wss://api.devnet.solana.com",
                TpuClientConfig::default(),
                cache,
            )
            .await?;
            send_and_confirm_transactions_in_parallel(
                arc_rpc_client,
                Some(tpu_client),
                &[txn],
                &signer,
                SendAndConfirmConfig {
                    resign_txs_count: Some(iteration_number),
                    with_spinner: true,
                },
            )
            .await
            .map_err(|err| {
                error!("Transaction send failed: {}", err);
                format!("Data writes to account failed: {}", err)
            })?
            .into_iter()
            .map(|err| format!("Data writes to account failed: {:?}", err))
            .collect::<String>()
        } else {
            String::new()
        };
        if !transaction_errors.is_empty() {
            error!("‚ùå Ata/Extend transaction failed: {}", transaction_errors);
            println!("‚ùå Ata/Extend transaction is not executed: {:?}", transaction_errors);
        } else {
            for details_instruction in vec_details_extend_instructions {
                let _ = write_lut_for_market(details_instruction.market.unwrap().address, lut_address, false)?;
            }
            info!("‚úÖ Ata/Extend transaction executed");
        }
    }
    
    Ok(())
}

pub async fn construct_transaction(transaction_infos: SwapPathResult) -> Vec<InstructionDetails> {
    let mut swap_instructions: Vec<InstructionDetails> = Vec::new();
    
    for (i, route_sim) in transaction_infos.route_simulations.iter().enumerate() {
        match route_sim.dex_label {
            DexLabel::METEORA => {
                let swap_params: SwapParametersMeteora = SwapParametersMeteora {
                    lb_pair: from_str(&transaction_infos.route_simulations[i].pool_address).unwrap_or_default(),
                    amount_in: transaction_infos.route_simulations[i].amount_in,
                    swap_for_y: transaction_infos.route_simulations[i].token_0to1,
                    input_token: from_str(&route_sim.token_in).unwrap_or_default(),
                    output_token: from_str(&route_sim.token_out).unwrap_or_default(),
                    minimum_amount_out: transaction_infos.route_simulations[i].estimated_amount_out.parse().unwrap_or_default(),
                };
                let result = construct_meteora_instructions(swap_params).await;
                if result.is_empty() {
                    error!("Error in Meteora Instruction");
                    return Vec::new();
                }
                swap_instructions.extend(result);
            }
            DexLabel::RAYDIUM => {
                error!("Raydium swaps disabled due to missing raydium_amm dependency");
                return Vec::new();
            }
            DexLabel::RAYDIUM_CLMM => {
                info!("‚ö†Ô∏è RAYDIUM_CLMM TX NOT IMPLEMENTED");
            }
            DexLabel::ORCA_WHIRLPOOLS => {
                let swap_params: SwapParametersOrcaWhirlpool = SwapParametersOrcaWhirlpool {
                    whirlpools: from_str(&transaction_infos.route_simulations[i].pool_address).unwrap_or_default(),
                    input_token: from_str(&route_sim.token_in).unwrap_or_default(),
                    output_token: from_str(&route_sim.token_out).unwrap_or_default(),
                    amount_in: transaction_infos.route_simulations[i].amount_in,
                    minimum_amount_out: transaction_infos.route_simulations[i].estimated_amount_out.parse().unwrap_or_default(),
                };
                let result = construct_orca_whirlpool_instructions(swap_params).await;
                if result.is_empty() {
                    error!("Error in Orca_Whirlpool Instruction");
                    return Vec::new();
                }
                swap_instructions.extend(result);
            }
            DexLabel::ORCA => {
                info!("‚ö†Ô∏è ORCA TX NOT IMPLEMENTED");
            }
        }
    }
    swap_instructions
}

pub async fn create_lut(chain: ChainType) -> Result<()> {
    info!("üõ†Ô∏è Create/Send LUT transaction...");
    let config = Config::load();
    let rpc_url = match chain {
        ChainType::Mainnet => config.rpc_url.clone(),
        ChainType::Devnet => "https://api.devnet.solana.com".to_string(),
    };
    let rpc_client = RpcClient::new(rpc_url);

    let payer = read_keypair_file("~/.config/solana/id.json").expect("Wallet keypair not found");
    let slot = rpc_client.get_slot_with_commitment(CommitmentConfig::finalized())?;
    let (create_instruction, lut_address) = create_lookup_table(payer.pubkey(), payer.pubkey(), slot - 200);

    let tx = VersionedTransaction::try_new(
        VersionedMessage::V0(v0::Message::try_compile(
            &payer.pubkey(),
            &[create_instruction],
            &[],
            rpc_client.get_latest_blockhash()?,
        )?),
        &[&payer],
    )?;

    let transaction_config = RpcSendTransactionConfig {
        skip_preflight: false,
        ..RpcSendTransactionConfig::default()
    };

    let signature = rpc_client.send_transaction_with_config(&tx, transaction_config)?;
    let explorer_url = match chain {
        ChainType::Devnet => format!("https://explorer.solana.com/tx/{}?cluster=devnet", signature),
        ChainType::Mainnet => format!("https://explorer.solana.com/tx/{}", signature),
    };
    info!("{}", explorer_url);

    let commitment_config = CommitmentConfig::confirmed();
    let tx_confirmed = check_tx_status(&rpc_client, signature, commitment_config).await?;
    if tx_confirmed {
        info!("‚úÖ Address LUT created: {:?}", lut_address);
    } else {
        error!("‚ùå Address LUT creation failed: {:?}", lut_address);
    }

    Ok(())
}

pub async fn is_available_lut(chain: ChainType, lut_address: Pubkey) -> Result<bool> {
    info!("üöö Check if LUT address is available...");
    let config = Config::load();
    let rpc_url = match chain {
        ChainType::Mainnet => config.rpc_url.clone(),
        ChainType::Devnet => "https://api.devnet.solana.com".to_string(),
    };
    let rpc_client = RpcClient::new(rpc_url);

    let raw_lut_account = rpc_client.get_account(&lut_address)?;
    let address_lookup_table = AddressLookupTable::deserialize(&raw_lut_account.data)?;
    
    Ok(address_lookup_table.addresses.len() < 210)
}

pub fn get_lut_address_for_market(market: Pubkey, is_test: bool) -> Result<(bool, Option<Pubkey>)> {
    let path = if is_test {
        "src/transactions/cache/lut_addresses_test.json"
    } else {
        "src/transactions/cache/lut_addresses.json"
    };
    let file = File::open(path)?;
    let lut_file: VecLUTFile = serde_json::from_reader(file)?;
    let lut_address = lut_file.value.iter().find(|item| from_str(&item.market).unwrap_or_default() == market);
    Ok(match lut_address {
        Some(item) => (true, Some(from_str(&item.lut_address).unwrap_or_default())),
        None => (false, None),
    })
}

pub fn write_lut_for_market(market: Pubkey, lut_address: Pubkey, is_test: bool) -> Result<()> {
    let path = if is_test {
        "src/transactions/cache/lut_addresses_test.json"
    } else {
        "src/transactions/cache/lut_addresses.json"
    };
    let file_exists = Path::new(path).exists();
    let mut lut_file = if !file_exists {
        File::create(path)?;
        VecLUTFile { value: vec![] }
    } else {
        let file = File::open(path)?;
        serde_json::from_reader(file).unwrap_or_else(|_| VecLUTFile { value: vec![] })
    };
    
    lut_file.value.push(LUTFile {
        market: market.to_string(),
        lut_address: lut_address.to_string(),
    });
    
    let file = File::create(path)?;
    serde_json::to_writer(file, &lut_file)?;
    info!("Data written to '{}'", path);
    Ok(())
}

#[derive(Debug, Clone)]
pub struct InstructionDetails {
    pub instruction: Instruction,
    pub details: String,
    pub market: Option<MarketInfos>,
}

#[derive(Debug, Clone)]
pub struct MarketInfos {
    pub dex_label: DexLabel,
    pub address: Pubkey,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VecLUTFile {
    pub value: Vec<LUTFile>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct LUTFile {
    pub market: String,
    pub lut_address: String,
}

pub enum TransactionType {
    CreateLUT,
    CreateSwap,
}

#[derive(PartialEq)]
pub enum SendOrSimulate {
    Simulate,
    Send,
}

#[derive(PartialEq, Clone)]
pub enum ChainType {
    Mainnet,
    Devnet,
}